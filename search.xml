<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>本地搭建BitNet</title>
      <link href="/2025/05/24/%E6%90%AD%E5%BB%BABitNet/"/>
      <url>/2025/05/24/%E6%90%AD%E5%BB%BABitNet/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近日，微软发布了一个全新的开源项目——BitNet.cpp，这是专为1-bit大语言模型（LLMs）推理而设计的框架。BitNet.cpp旨在通过优化内核为CPU上运行的1.58-bit模型提供快速且无损的推理支持，并在未来版本中计划支持NPU和GPU。</p><p>BitNet.cpp的开源为1-bit LLM的普及和大规模推理打开了新的大门，其在CPU上的高效推理性能，极大地扩展了大模型在本地设备上的可行性。未来，随着对NPU和GPU的支持，BitNet.cpp有望成为低比特模型推理的主流框架。如果你对大模型在实际应用中的推理性能感兴趣，BitNet.cpp无疑是值得关注和尝试的项目。</p><p>BitNet是微软近期推出的极限精简的推理框架，官方的介绍里，详细介绍了它的架构优势，以及和其他模型的对比实验，总结起来就是不挑设备，不占资源，不减性能！俩字儿牛x，仨字儿很牛x，四个字儿…</p><p>仓库地址：<a href="https://github.com/microsoft/BitNet">https://github.com/microsoft/BitNet</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="C-环境配置"><a href="#C-环境配置" class="headerlink" title="C++环境配置"></a>C++环境配置</h3><p>按照github中的步骤安装相应的C++环境</p><img src="image-20250524151721738.png" alt="image-20250524151721738" style="zoom: 67%;" /><p>当C++相关环境配置完成后，后续的步骤，都需要在<strong>开发者的命令提示符或者PowerShell环境</strong>下进行，这点官方文档也给出了重点说明</p><img src="image-20250524151743221.png" alt="image-20250524151743221" style="zoom:67%;" /><h3 id="BitNet库克隆"><a href="#BitNet库克隆" class="headerlink" title="BitNet库克隆"></a>BitNet库克隆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/microsoft/BitNet.git</span><br><span class="line">cd BitNet</span><br></pre></td></tr></table></figure><img src="image-20250524152153312.png" alt="image-20250524152153312" /><h3 id="Conda环境配置"><a href="#Conda环境配置" class="headerlink" title="Conda环境配置"></a>Conda环境配置</h3><p>根据步骤提示，创建Conda环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (Recommended) Create a new conda environment</span></span><br><span class="line">conda create -n bitnet-cpp python=<span class="number">3.9</span></span><br><span class="line">conda activate bitnet-cpp</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>安装依赖，直接按文档来即可</p><img src="image-20250524152436022.png" alt="image-20250524152436022" style="zoom: 50%;" /><h3 id="模型下载"><a href="#模型下载" class="headerlink" title="模型下载"></a>模型下载</h3><p>github文档里介绍的方式是，通过huggingface-cli进行下载，需要科学上网才能正常下载的，大家到这如果进行不下去，可以试试直接到huggingface官网手动把模型下载下来，模型地址：<a href="https://huggingface.co/microsoft/bitnet-b1.58-2B-4T-gguf/tree/main%E3%80%82">https://huggingface.co/microsoft/bitnet-b1.58-2B-4T-gguf/tree/main。</a></p><p>使用huggingface-cli进行下载如下图所示：</p><img src="image-20250524152415407.png" alt="image-20250524152415407" style="zoom:67%;" /><h3 id="模型编译"><a href="#模型编译" class="headerlink" title="模型编译"></a>模型编译</h3><p>按照github文档说明执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup_env.py -md models/BitNet-b1<span class="number">.58</span>-2B-4T -q i2_s</span><br></pre></td></tr></table></figure><p>这里需要注意的是克隆的bitnet库，那到编译这一步大概率是走不通的，首先是因为这点官方文档里也说明了，由于本项目上游的llama.cpp项目有几个文件存在bug，c++文件丢失了引用，所以我们需要手动的把这几个文件修复一下，官方也给了修复地址在这里：<a href="https://github.com/tinglou/llama.cpp/commit/4e3db1e3d78cc1bcd22bcb3af54bd2a4628dd323">https://github.com/tinglou/llama.cpp/commit/4e3db1e3d78cc1bcd22bcb3af54bd2a4628dd323</a></p><p>这里我们就直接参照他的说明修改一下就行，不会c++也没问题，分别修复一下四个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">…\3rdparty\llama.cpp\common\common.cpp</span><br><span class="line">…\3rdparty\llama.cpp\common\log.cpp</span><br><span class="line">…\3rdparty\llama.cpp\examples\imatrix\imatrix.cpp</span><br><span class="line">…\3rdparty\llama.cpp\examples\perplexity\perplexity.cpp</span><br><span class="line">… 代表bitnet项目的根目录。</span><br></pre></td></tr></table></figure><p>修复的内容是一样的，在头部添加一下引用即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样可以解决基本问题，但是我在运行时出现了以下报错</p><img src="image-20250524152618039.png" alt="image-20250524152618039" style="zoom: 67%;" /><p>这个问题在github文档中也有提到</p><img src="image-20250524152746798.png" alt="image-20250524152746798" style="zoom: 67%;" /><p>是因为无法在 Windows 的 conda 环境中使用 clang 进行构建导致的，根据文档中的提示进行修改，我使用的是PowerShell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module <span class="string">&quot;C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\Tools\Microsoft.VisualStudio.DevShell.dll&quot;</span> Enter-VsDevShell 3f0e31ad -SkipAutomaticLocation -DevCmdArguments <span class="string">&quot;-arch=x64 -host_arch=x64&quot;</span></span><br></pre></td></tr></table></figure><p>这里要注意目录文件中的 <strong>\Professional</strong> 要根据自己的Visual Studio版本进行修改，我的是Comuunity版本</p><p>同时这条命令可以分开执行，首先执行如下命令直接加载DevShell模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module <span class="string">&quot;C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\Tools\Microsoft.VisualStudio.DevShell.dll&quot;</span></span><br></pre></td></tr></table></figure><img src="image-20250524153124051.png" alt="image-20250524153124051" /><p>然后执行如下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter-VsDevShell 3f0e31ad -SkipAutomaticLocation -DevCmdArguments <span class="string">&quot;-arch=x64 -host_arch=x64&quot;</span></span><br></pre></td></tr></table></figure><p>要注意，这里的 <strong>“3f0e31ad”</strong> 是 <strong>Instance ID</strong>，需要自己去查找，否则就会出现以下错误</p><img src="image-20250524153216797.png" alt="image-20250524153216797" /><p>查找过程非常简单，按照如下步骤即可：</p><p>首先安装VSSetup PowerShell模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module -Name VSSetup -Scope CurrentUser -Force</span><br></pre></td></tr></table></figure><img src="image-20250524153251877.png" alt="image-20250524153251877" /><p>安装后导入模块并查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Import-Module VSSetup</span><br><span class="line">Get-VSSetupInstance</span><br></pre></td></tr></table></figure><img src="image-20250524153425503.png" alt="image-20250524153425503" style="zoom:67%;" /><p>然后根据获取的InstanceID修改命令，运行即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter-VsDevShell 6d25e4c3 -SkipAutomaticLocation -DevCmdArguments <span class="string">&quot;-arch=x64 -host_arch=x64&quot;</span></span><br></pre></td></tr></table></figure><img src="image-20250524153549415.png" alt="image-20250524153549415" /><p>输入如下命令，可以验证此时可以使用clang</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -v</span><br></pre></td></tr></table></figure><img src="image-20250524153810794.png" alt="image-20250524153810794" /><p>最后执行编译指令，就可以通过编译了，这里可能需要稍等一小会儿才会编译完成。</p><img src="image-20250524153720330.png" alt="image-20250524153720330" /><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p>经过漫长的环境配置之后，终于可以测试了，执行以下代码，启动对话窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python run_inference.py -m models/BitNet-b1<span class="number">.58</span>-2B-4T/ggml-model-i2_s.gguf -p <span class="string">&quot;You are a helpful assistant&quot;</span> -cnv</span><br></pre></td></tr></table></figure><img src="image-20250524153924601.png" alt="image-20250524153924601" style="zoom:67%;" /><p>至此，我们就基本完成了本地部署BitNet的工作了，就像文章开头说过的，目前，本地跑的BitNet模型，并不是一个全精度模型，尺寸很小，所以可以流畅的运行在CPU环境下，且内存占用率极低，但实际测试大部分的对话它是理解错误的，也就是不是很可用，但这东西如果专门用来探索边缘计算的场景，经过调教之后，应该也能发挥很大的用处。</p>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BitNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>院校投递</title>
      <link href="/2024/12/15/%E9%99%A2%E6%A0%A1%E6%8A%95%E9%80%92/"/>
      <url>/2024/12/15/%E9%99%A2%E6%A0%A1%E6%8A%95%E9%80%92/</url>
      
        <content type="html"><![CDATA[<p>致成功推免的自己，既然选择远方，当不负青春，砥砺前行。青春由磨砺而出彩，人生因奋斗而升华！但行前路，不负韶华！每一个裂缝都是为透出光而努力。本文是个人推免院校投递情况，圆梦山大！！！为国家储人才，为民族图富强！学无止境，气有浩然！</p><table><thead><tr><th align="center">序号</th><th align="center">学校名称</th><th align="center">报考学院及专业</th><th align="center">状态</th><th align="center">是否投递</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong><span style="color:#CC0000;">东北大学</span></strong></td><td align="center">计算机科学与工程学院 计算机科学与技术</td><td align="center"><strong><span style="color:#CC0000;">进入复试，候补</span></strong></td><td align="center">已投递</td></tr><tr><td align="center">2</td><td align="center">天津大学</td><td align="center">智能与计算学部 计算机科学与技术</td><td align="center"><strong><span style="color:#0080FF;">机测未通过</span></strong></td><td align="center">已投递</td></tr><tr><td align="center">3</td><td align="center">重庆大学</td><td align="center">计算机学院 计算机科学与技术</td><td align="center"><strong><span style="color:#9933FF;">进入复试已拒绝</span></strong></td><td align="center">已投递</td></tr><tr><td align="center">4</td><td align="center">山东大学</td><td align="center">人工智能学院 计算机科学与技术</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">5</td><td align="center">山东大学</td><td align="center">软件学院 人工智能</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">6</td><td align="center"><strong><span style="color:#CC0000;">山东大学</span></strong></td><td align="center">计算机科学与技术学院 计算机科学与技术(学硕)</td><td align="center"><strong><span style="color:#CC0000;">进入复试，上岸</span></strong></td><td align="center">已投递</td></tr><tr><td align="center">7</td><td align="center">哈工深</td><td align="center">计算机科学与技术学院 计算机科学与技术</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">8</td><td align="center">中海洋</td><td align="center">信息科学与工程学部 计算机科学与技术</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">9</td><td align="center">大工</td><td align="center">计算机科学与技术学院  计算机科学与技术</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">10</td><td align="center">中山大学</td><td align="center">计算机学院 计算机技术(专硕)</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">11</td><td align="center">湖南大学</td><td align="center">信息科学与工程学院 计算机科学与技术</td><td align="center"><strong><span style="color:#FF66B2;">个人失误</span></strong></td><td align="center">已投递</td></tr><tr><td align="center">12</td><td align="center">华南理工</td><td align="center">计算机科学与工程学院 计算机应用技术</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">13</td><td align="center">华南理工</td><td align="center">未来科技学院 人工智能</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">14</td><td align="center">西工大</td><td align="center">计算机学院 计算机科学与技术</td><td align="center"></td><td align="center">未投递</td></tr><tr><td align="center">15</td><td align="center">中山大学</td><td align="center">人工智能学院</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">16</td><td align="center">华东师范</td><td align="center">计算机科学与技术学院 计算机科学与技术</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">17</td><td align="center">国科大</td><td align="center">计算机网络信息中心 计算机应用技术</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">18</td><td align="center"><span style="color:#CC0000; font-weight:bold;">南理</span></td><td align="center">计算机科学与工程学院 计算机科学与技术</td><td align="center"><strong><span style="color:#CC0000;">拟录取</span></strong></td><td align="center">已投递</td></tr><tr><td align="center">19</td><td align="center">南航</td><td align="center">计算机科学与技术学院&#x2F;人工智能学院&#x2F;软件学院 计算机科学与技术</td><td align="center"><strong><span style="color:#9933FF;">进入复试已拒绝</span></strong></td><td align="center">已投递</td></tr><tr><td align="center">20</td><td align="center">西电</td><td align="center">计算机科学与技术学院  计算机科学与技术</td><td align="center"><strong>被拒</strong></td><td align="center">已投递</td></tr><tr><td align="center">21</td><td align="center">暨南大学</td><td align="center">暨南大学 信息科学技术学院 人工智能</td><td align="center"><strong><span style="color:#9933FF;">进入复试已拒绝</span></strong></td><td align="center">已投递</td></tr><tr><td align="center">22</td><td align="center">上海大学</td><td align="center">计算机工程与科学学院 计算机科学与技术</td><td align="center"><strong><span style="color:#9933FF;">进入复试已拒绝</span></strong></td><td align="center">已投递</td></tr><tr><td align="center">23</td><td align="center">武理</td><td align="center">计算机与信息技术学院 计算机科学与技术</td><td align="center"></td><td align="center">未投递</td></tr><tr><td align="center">24</td><td align="center">华东理工</td><td align="center">信息科学与工程学院 计算机科学与技术</td><td align="center"></td><td align="center">未投递</td></tr><tr><td align="center">25</td><td align="center"><strong><span style="color:#CC0000;">合工大</span></strong></td><td align="center">计算机与信息技术学院 计算机科学与技术</td><td align="center"><strong><span style="color:#CC0000;">拟录取</span></strong></td><td align="center">已投递</td></tr><tr><td align="center">26</td><td align="center">北交</td><td align="center">计算机与信息技术学院 计算机科学与技术</td><td align="center"></td><td align="center">未投递</td></tr><tr><td align="center">27</td><td align="center"><strong><span style="color:#CC0000;">西电</span></strong></td><td align="center">空间科学与技术学院 控制科学与工程</td><td align="center"><strong><span style="color:#CC0000;">进入复试，候补</span></strong></td><td align="center">已投递</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 个人杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推免 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/12/15/hello-world/"/>
      <url>/2024/12/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
